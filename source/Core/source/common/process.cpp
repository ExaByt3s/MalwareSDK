

#include <common/base_types.h>
#include <common/process.h>
#include <common/DynamicCall.h>
#include <common/debug.h>

namespace process
{
	DWORD GetCurrentProcessID()
	{
		return  API_KERNEL32(GetCurrentProcessId)();
	}

	MODULE_ENTRY_LIST GetProcessModules(DWORD processID)
	{
		HANDLE hSnapshot;
		MODULEENTRY32 hModule;
		vector<MODULEENTRY32> vModules;

		// Process ID = 0 or -1 => current process

		if (processID == 0 || processID == -1) 
			processID = process::GetCurrentProcessID();

		/* Get processes snapshot */

		hSnapshot = API(KERNEL32, CreateToolhelp32Snapshot)(TH32CS_SNAPMODULE, processID);

		if (hSnapshot == INVALID_HANDLE_VALUE)
		{
			OUT_DEBUG_ERROR("Cannot get modules snapshot!");
			return vModules;
		}

		hModule.dwSize = sizeof(MODULEENTRY32);

		// Get first process

		if (!API(KERNEL32, Module32First)(hSnapshot, &hModule))
		{
			OUT_DEBUG_ERROR(" Cannot get first module!");
			return vModules;
		}

		vModules.push_back(hModule);

		// Get all processes

		while (API(KERNEL32, Module32Next)(hSnapshot, &hModule))
			vModules.push_back(hModule);

		return vModules;
	}

	HANDLE GetCurrentProcess()
	{
		return  API_KERNEL32(GetCurrentProcess)();
	}
}
