
#include <windows.h>
#include <common/string.h>
#include <common/DynamicCall.h>
#include <common/fs.h>
#include <common/paths.h>


namespace file
{
	bool isDotsName(LPWSTR name)
	{
		if ((name && *name == '.' && (name[1] == 0 || (name[1] == '.' && name[2] == 0))))
			return true;

		return false;
	}

	void find(LPWSTR path, LPWSTR mask, DWORD flags, FILE_SEARH_ROUTINE routune, void* data)
	{
		WCHAR actuall[MAX_PATH];
		WIN32_FIND_DATAW wfd;
		HANDLE handle;

		if (!paths::Combine(actuall, path, L"*"))
			return;

		handle = API_KERNEL32(FindFirstFileW)(actuall, &wfd);

		if (handle != INVALID_HANDLE_VALUE)
		{

			do
			{

				if (wfd.dwFileAttributes & FILE_ATTRIBUTE_REPARSE_POINT)
					continue;

				if (isDotsName(wfd.cFileName))
					continue;

				if (wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY && flags & FILE_SEARCH_FOLDERS)
				{
					if (paths::MatchSpec(wfd.cFileName, mask) != false)
						if (!routune(path, &wfd, data))
							goto END;
					
				}



				if (wfd.dwFileAttributes & FILE_ATTRIBUTE_ARCHIVE && flags & FILE_SEARCH_FILES)
					if (paths::MatchSpec(wfd.cFileName, mask) != false)
						if (!routune(path, &wfd, data))
							goto END;


				if (wfd.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY && flags & FILE_SEARCH_RECURSIVE)
					if (paths::Combine(actuall, path, wfd.cFileName))
						find(actuall, mask, flags, routune, data);


			} while (API_KERNEL32(FindNextFileW)(handle, &wfd) != FALSE);
		}

	END:
		API_KERNEL32(FindClose)(handle);
	}

}
