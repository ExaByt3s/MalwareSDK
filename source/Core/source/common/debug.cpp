
#include <common/debug.h>
#include <common/DynamicCall.h>
#include <common/str_traits.h>
#include <common/paths.h>


DbgPrint::DbgPrint(LPSTR strFuncName, LPSTR strSourceFile, DWORD line, BYTE bType, LPWSTR pstrFormat, ...) :
	dwPID(0), dwTID(0), dwTickCount(0), dwLineNumber(0), buffer(nullptr)
{


	dwPID = API(KERNEL32, GetCurrentProcessId)();
	dwTID = API(KERNEL32, GetCurrentThreadId)();
	dwTickCount = API(KERNEL32, GetTickCount)();
	dwLineNumber = line;

	va_list list;
	va_start(list, pstrFormat);
	writte(strFuncName, strSourceFile, line, bType, pstrFormat, list);
	va_end(list);
}


DbgPrint::~DbgPrint()
{
	if (buffer != nullptr)  delete[] buffer;
}

void DbgPrint::writte(LPSTR strFuncName, LPSTR strSourceFile, DWORD line, BYTE bType, LPWSTR pstrFormat, va_list arglist)
{

	DWORD dwSize = 0;
	LPSTR WDDType[] = { "INFO", "WARNING", "ERROR" };

	if (strFuncName) dwSize = str::strlen(strFuncName);
	else dwSize = 0;

	if (dwSize > 0)
	{
		dwSize++;
		str::strcopy(FunctionName, strFuncName, min((sizeof(FunctionName) / sizeof(char)), dwSize));
	}

	if (strSourceFile) dwSize = str::strlen(strSourceFile);
	else dwSize = 0;

	if (dwSize > 0)
	{
		LPSTR fileName = paths::FindFileName(strSourceFile);
		mem::memcpy(SourceFile, fileName, 50);
	}



	buffer = new WCHAR[2048 * sizeof(WCHAR)];

	char strFaile[sizeof("FAILED TO ALLOCATE STRING.")];
	mem::memcpy(strFaile, "FAILED TO ALLOCATE STRING.", sizeof("FAILED TO ALLOCATE STRING.") * sizeof(char));

	int iSysSize = str::sprintf
	(
		buffer, 250, L"PID=%04u, TID=%04u, F=%S, FL=%S (%u)\r\n%S: ",
		dwPID, dwTID, FunctionName, SourceFile, dwLineNumber,
		(bType < sizeof(WDDType) / sizeof(LPSTR) ? WDDType[bType] : "-")
	);


	if (iSysSize > 0)
		int iLogSize = str::vsprintf(buffer + iSysSize, 2048 * sizeof(WCHAR) - iSysSize, pstrFormat, arglist);
	

	API(KERNEL32, OutputDebugStringW)(buffer);

}
