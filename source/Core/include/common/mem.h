
#pragma once

#include <common/base_types.h>
#include <type_traits>
#include <common/defines.h>

namespace mem
{

	/**
	 * \brief 
	 * \param size 
	 * \return 
	 */
	bool Initialize(unsigned int size);


	/**
	 * \brief 
	 * \return 
	 */
	bool Initialize();


	/**
	 * \brief 
	 * \tparam T 
	 * \param arg 
	 * \return 
	 */
	template<class T>
	typename std::remove_reference<T>::type&&
		move(T&& arg) noexcept
	{
		return static_cast<typename std::remove_reference<T>::type&&>(arg);
	}

	/**
	 * \brief 
	 * \param dst 
	 * \param src 
	 * \param count 
	 * \return 
	 */
	void* memcpy(void* dst, const void* src, size_t count);


	/**
	* \brief
	* \param buf1
	* \param buf2
	* \param count
	* \return
	*/
	int memcmp(const void* buf1, const void* buf2, size_t count);


	/**
	* \brief
	* \param dst
	* \param src
	* \param count
	* \return
	*/
	void* memmove(void* dst, const void* src, size_t count);

	/**
	* \brief
	* \param dst
	* \param size_in_bytes
	* \param src
	* \param count
	* \return
	*/
	int memmove_s(void* dst, size_t size_in_bytes, const void* src, size_t count);


	/**
	 * \brief 
	 * \param src 
	 * \param count 
	 * \return 
	 */
	void* duplicate(const void* src, size_t count);


	/**
	 * \brief 
	 * \param dst 
	 * \param val 
	 * \param count 
	 * \return 
	 */
	void* memset(void* dst, int val, size_t count);




	/**
	 * \brief 
	 * \param mem1 
	 * \param mem2 
	 * \param size 
	 */
	void memswap(void *mem1, void *mem2, size_t size);


	/**
	 * \brief 
	 * \param size 
	 * \return 
	 */
	void* malloc(size_t size);

	/**
	 * \brief 
	 * \param p 
	 * \param size 
	 * \return 
	 */
	void* realloc(void* p, size_t size);

	/**
	 * \brief 
	 * \param old 
	 * \param size 
	 * \return 
	 */
	bool reallocEx(void* old, size_t size);

	/**
	 * \brief 
	 * \param p 
	 */
	void free(void* p);

	/**
	 * \brief 
	 * \param mem 
	 * \param count 
	 */
	void freeArrayOfPointers(void *mem, SIZE_T count);

	/**
	 * \brief 
	 * \param mem 
	 * \param size 
	 */
	void zero(void* mem, unsigned long size);


}


void* operator new(size_t blocksize);

void* operator new[](size_t blocksize);

void operator delete(void* block);

void operator delete[](void* block);
