#pragma once

#include <windows.h>


#pragma warning(push, 0)
#pragma warning(disable: 4265 4365 4836 4574)
# include <stddef.h>
#pragma warning(pop)

#include <inttypes.h> // PRId8, SCNd8, etc.

#pragma warning(push, 0)
# include <stdint.h>   // int32_t, INT64_C, UINT8_MAX, etc.
# include <math.h>     // float_t, double_t, etc.
# include <float.h>    // FLT_EVAL_METHOD.
#pragma warning(pop)


#include <common/defines.h>

/////////////////
//
////////////////
typedef VOID(WINAPI		*tExitProcess)(UINT uExitCode); //KERNEL32
typedef BOOL(WINAPI		*tGetComputerNameA)(LPTSTR lpBuffer, LPDWORD lpnSize); //KERNEL32
typedef BOOL(WINAPI		*tGetKeyboardState)(PBYTE lpKeyState); //USER32
typedef DWORD(WINAPI	*tGetCurrentThreadId)(); //KERNEL32
typedef HKL(WINAPI		*tGetKeyboardLayout)(DWORD idThread); //USER32
typedef int (WINAPI		*tToAsciiEx)(UINT uVirtKey, UINT uScanCode, const BYTE *lpKeyState, LPWORD lpChar, UINT uFlags, HKL dwhkl); //USER32
typedef LPTSTR(WINAPI	*tGetCommandLineA)(); //KERNEL32
typedef HANDLE(WINAPI	*tGetCurrentProcess)(); //KERNEL32
typedef VOID(WINAPI		*tSleep)(DWORD dwMilliseconds); //KERNEL32
typedef HMODULE(WINAPI	*tLoadLibraryA)(LPCSTR lpFileName); //KERNEL32
typedef HMODULE(WINAPI	*tLoadLibraryW)(LPCWSTR lpFileName); //KERNEL32
typedef BOOL(WINAPI		*tFreeLibrary)(HMODULE hModule); //KERNEL32
typedef FARPROC(WINAPI	*tGetProcAddress)(HMODULE hModule, LPCSTR lpProcName); //KERNEL32

