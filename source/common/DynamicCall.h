#pragma once
#include "inetrnal/windows_internal_structs.h"

typedef ::internal::PEB CUSTEM_PEB, *LP_CUSTOM_PEB;
typedef ::internal::LIST_ENTRY MY_LIST_ENTRY, *LP_MY_LIST_ENTRY;
typedef ::internal::LDR_DATA_TABLE_ENTRY MY_LDR_DATA_TABLE_ENTRY, *LP_MY_LDR_DATA_TABLE_ENTRY;


namespace DynamicCall
{
	enum
	{
		USE_DLL_KERNEL32 = 1,
		USE_DLL_ADVAPI32 = 2,
		USE_DLL_USER32 = 3,
		USE_DLL_WINSOCK = 4,
		USE_DLL_NTDLL = 5,
		USE_DLL_WINSTA = 6,
		USE_DLL_SHELL32 = 7,
		USE_DLL_WININET = 8,
		USE_DLL_URLMON = 9,
		USE_DLL_NSPR4 = 10,
		USE_DLL_SSL3 = 11,
		USE_DLL_WINMM = 12,
		USE_DLL_CABINET = 13,
		USE_DLL_OPERA = 14,
		USE_DLL_GDI = 15,
		USE_DLL_GDIPLUS = 16,
		USE_DLL_CRYPT32 = 17,
		USE_DLL_PSAPI = 18,
		USE_DLL_SHLWAPI = 19,
		USE_DLL_IPHLPAPI = 20,
		USE_DLL_WINSPOOL = 21,
		USE_DLL_COMMDLG32 = 22,
		USE_DLL_ODBC32 = 23,
		USE_DLL_VERSION = 24,
		USE_DLL_OLE32 = 25,
		USE_DLL_IMAGEHLP = 26,
		USE_DLL_CRYPTDLL = 27,
	};


	/**
	 * \brief
	 * \return
	 */
	LP_CUSTOM_PEB GetPEB();


	/**
	 * \brief
	 * \param ID
	 * \return
	 */


	LPSTR GetDllByName(DWORD ID);
	/**
	 * \brief
	 * \param hash
	 * \return
	 */


	HMODULE GetDllBase(DWORD hash);


	/**
	 * \brief
	 * \return
	 */
	HMODULE GetKernel32();


	/**
	 * \brief
	 * \param hModule
	 * \param dwProcHash
	 * \return
	 */
	DWORD_PTR GetAdressOfAPI(HMODULE hModule, DWORD dwProcHash);

	DWORD_PTR GetProcAddressEx(char* FullDllName, DWORD dwModule, DWORD dwProcHash);


	namespace internal
	{
		template <typename TCHAR>
		size_t to_hash(const TCHAR* src, size_t length, bool to_lower = true)
		{
			{
				if (src == nullptr)
					return DWORD(-1);

				DWORD hah = 0;

				for (DWORD i = 0; *src != 0 && (length == 0 || i < length); ++src, i++)
				{
					TCHAR byte = *src;

					if (to_lower)
						if (byte >= 'A' && byte <= 'Z') byte = byte + ('a' - 'A');

					hah = ((hah << 7) & DWORD(-1)) | (hah >> (32 - 7));
					hah = hah ^ byte;
				}

				return hah;
			}
		}
	}


	template <class T, DWORD DLL_ID, DWORD HASH, typename... Rest>
	inline T call(Rest ... rest)
	{
		DWORD DLL_ID_ = DLL_ID;
		DWORD F_HASH = HASH;
		typedef T(WINAPI *newfunc)(Rest ...);
		newfunc func = reinterpret_cast<newfunc>(GetProcAddressEx(nullptr, DLL_ID, HASH));
		return func(rest...);
	}
}


#include "..\common\inetrnal\DynamicKernel32.h"