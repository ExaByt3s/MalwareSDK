#pragma once
#include "inetrnal/windows_internal_structs.h"

typedef ::internal::PEB CUSTEM_PEB, *LP_CUSTOM_PEB;
typedef ::internal::LIST_ENTRY MY_LIST_ENTRY, *LP_MY_LIST_ENTRY;
typedef ::internal::LDR_DATA_TABLE_ENTRY MY_LDR_DATA_TABLE_ENTRY, *LP_MY_LDR_DATA_TABLE_ENTRY;


namespace DynamicCall
{
	enum
	{
		USE_DLL_KERNEL32 = 1,
		USE_DLL_ADVAPI32 = 2,
		USE_DLL_USER32 = 3,
		USE_DLL_WINSOCK = 4,
		USE_DLL_NTDLL = 5,
		USE_DLL_WINSTA = 6,
		USE_DLL_SHELL32 = 7,
		USE_DLL_WININET = 8,
		USE_DLL_URLMON = 9,
		USE_DLL_NSPR4 = 10,
		USE_DLL_SSL3 = 11,
		USE_DLL_WINMM = 12,
		USE_DLL_CABINET = 13,
		USE_DLL_OPERA = 14,
		USE_DLL_GDI = 15,
		USE_DLL_GDIPLUS = 16,
		USE_DLL_CRYPT32 = 17,
		USE_DLL_PSAPI = 18,
		USE_DLL_SHLWAPI = 19,
		USE_DLL_IPHLPAPI = 20,
		USE_DLL_WINSPOOL = 21,
		USE_DLL_COMMDLG32 = 22,
		USE_DLL_ODBC32 = 23,
		USE_DLL_VERSION = 24,
		USE_DLL_OLE32 = 25,
		USE_DLL_IMAGEHLP = 26,
		USE_DLL_CRYPTDLL = 27,
	};


	/**
	 * \brief
	 * \return
	 */
	LP_CUSTOM_PEB GetPEB();


	/**
	 * \brief
	 * \param ID
	 * \return
	 */


	LPSTR GetDllByName(DWORD ID);
	/**
	 * \brief
	 * \param hash
	 * \return
	 */


	HMODULE GetDllBase(DWORD hash);


	/**
	 * \brief
	 * \return
	 */
	HMODULE GetKernel32();


	/**
	 * \brief
	 * \param hModule
	 * \param dwProcHash
	 * \return
	 */
	DWORD_PTR GetAdressOfAPI(HMODULE hModule, DWORD dwProcHash);

	DWORD_PTR GetProcAddressEx(char* FullDllName, DWORD dwModule, DWORD dwProcHash);


	namespace internal
	{
		template <typename TCHAR>
		size_t to_hash(const TCHAR* src, size_t length, bool to_lower = true)
		{
			{
				if (src == nullptr)
					return DWORD(-1);

				DWORD hah = 0;

				for (DWORD i = 0; *src != 0 && (length == 0 || i < length); ++src, i++)
				{
					TCHAR byte = *src;

					if (to_lower)
						if (byte >= 'A' && byte <= 'Z') byte = byte + ('a' - 'A');

					hah = ((hah << 7) & DWORD(-1)) | (hah >> (32 - 7));
					hah = hah ^ byte;
				}

				return hah;
			}
		}
	}




	template <typename return_t, DWORD module_id, DWORD hash>
	inline return_t stdcall_args()
	{
		typedef return_t(WINAPI *newfunc)();
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func();
	}


	template <typename return_t, DWORD module_id, DWORD hash, class A>
	inline return_t stdcall_args(A a1)
	{
		typedef return_t(WINAPI *newfunc)(A);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B>
	inline return_t stdcall_args(A a1, B a2)
	{
		typedef return_t(WINAPI *newfunc)(A, B);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C>
	inline return_t stdcall_args(A a1, B a2, C a3)
	{
		DWORD mid = hash;
		typedef return_t(WINAPI *newfunc)(A, B, C);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		
		if (func != nullptr)
			return  func(a1, a2, a3);
		
		return NULL;
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G, H);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G, H, I);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8, a9);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X, class Y>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10, Y a11)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X, Y);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A, class B, class C, class D, class E, class F, class G, class H, class I, class X, class Y, class Z, class R>
	inline return_t stdcall_args(A a1, B a2, C a3, D a4, E a5, F a6, G a7, H a8, I a9, X a10, Y a11, Z a12, R a13)
	{
		typedef return_t(WINAPI *newfunc)(A, B, C, D, E, F, G, H, I, X, Y, Z, R);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
	}

	template <typename return_t, DWORD module_id, DWORD hash, class A1, class A2, class A3, class A4, class A5, class A6, class A7, class A8, class A9, class A10, class A11, class A12>
	inline return_t stdcall_args(A1 a1, A2 a2, A3 a3, A4 a4, A5 a5, A6 a6, A7 a7, A8 a8, A9 a9, A10 a10, A11 a11, A12 a12)
	{
		typedef return_t(WINAPI *newfunc)(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12);
		newfunc func = newfunc(GetProcAddressEx(nullptr, module_id, hash));;
		return func(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);


	}
}


#include "..\common\inetrnal\DynamicKernel32.h"