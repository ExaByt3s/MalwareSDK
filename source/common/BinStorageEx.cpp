#include <stdafx.h>

#include "..\common\binstorage.h"
#include "..\common\BinStorageEx.h"
#include "..\common\str.h"
#include "..\common\mem.h"
#include "..\common\fs.h"
#include "..\common\ucl.h"


#define SHF_REMOVED 0x1 //������� ������.


namespace BinStorage
{
	BinStorageEx::BinStorageEx() : binStorage(nullptr)
	{
		initialize();
	}

	BinStorageEx::~BinStorageEx()
	{
	}

	bool BinStorageEx::add(DWORD id, DWORD flags, void* data, DWORD dataSize) const
	{
		DWORD newStorageSize = binStorage->size + sizeof(ITEM) + dataSize;
		if (newStorageSize > binStorage->size && id > 0 && Mem::reallocEx(binStorage, newStorageSize))
		{
			STORAGE* p = binStorage;
			ITEM* item = reinterpret_cast<ITEM *>(reinterpret_cast<LPBYTE>(binStorage) + p->size);
			LPBYTE dest = LPBYTE(item) + sizeof(ITEM);

			if (dataSize == 0)flags &= ~ITEMF_COMPRESSED;

			if (flags & ITEMF_COMPRESSED)
			{
				item->size = dataSize;
				int r = UCL::E_ERROR; 

				if ((r = UCL::_Compress(LPBYTE(data), dataSize, dest, &item->size, NULL, UCL::CF_NRV2B | UCL::CF_LEVEL_MAX)) == UCL::E_OUT_OF_BUFFER)
					flags &= ~ITEMF_COMPRESSED;

				else if (r != UCL::E_SUCCESSED) return false;
			}

			if ((flags & ITEMF_COMPRESSED) == 0)
			{
				item->size = dataSize;
				if (dataSize > 0)Mem::_copy(dest, data, dataSize);
			}

			DWORD fullItemSize = sizeof(ITEM) + item->size;
			if ((newStorageSize = p->size + fullItemSize) <= (10 * 1024 * 1024))
			{
				item->id = id;
				item->flags = flags;
				item->realSize = dataSize;

				p->size = newStorageSize;
				p->count++;
				return true;
			}
		}
		return false;
	}

	bool BinStorageEx::add(DWORD id, DWORD flags, LPWSTR string) const
	{
		bool r = false;
		Str::UTF8STRING u8s;

		if (Str::_utf8FromUnicode(string, -1, &u8s))
		{
			r = add(id, flags, u8s.data, u8s.size);
			Str::_utf8Free(&u8s);
		}

		return r;
	}
	
	bool BinStorageEx::add(DWORD id, DWORD flags, LPSTR string) const
	{
		bool r = false;
		Str::UTF8STRING u8s;

		if (Str::_utf8FromAnsi(string, -1, &u8s))
		{
			r = add(id, flags, u8s.data, u8s.size);
			Str::_utf8Free(&u8s);
		}

		return r;
	}

	void BinStorageEx::initialize()
	{
		if (binStorage != nullptr)
			return;

		binStorage = new STORAGE[sizeof(STORAGE)];
		binStorage->size = sizeof(STORAGE);
	}



}
